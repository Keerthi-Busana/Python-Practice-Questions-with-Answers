# -*- coding: utf-8 -*-
"""Python Modules

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17g1Br3yrEfmnwMxycYn6WN1trbVsYUzS

**1 Module - random**
"""

#1. Write a Python program to generate a random color hex, a random alphabetical string, 
# random value between two integers (inclusive) and a random multiple of 7 between 0 and 70. Use random.randint()


import random 

import random
color = "%06x" % random.randint(0, 0xFFFFFF)
print(color)

for i in range(70):
  print(random.randint(0,71)*7)

#2. Write a Python program to select a random element from a list, set, dictionary (value) and a file from a directory. Use random.choice()

import random

list_values = [1,2,3,4]

random_list = random.choice(list_values)
print('random_list is: ', random_list)

set_values = (34,13,22,6)
random_set = random.choice(set_values)
print('random_set is:', random_set)

dict = {'a': 1, 'b':2, 'c':3}
random_dict = random.choice(list(dict.values()))
print('random_dict is: ', random_dict)

"""**Topic 2 : Module - types**"""

#1. Write a Python program to check if a function is a user-defined function or not. Use types.FunctionType, types.LambdaType()

import types
def f():
  return 1

print(isinstance(f, types.FunctionType))
print(isinstance(f, types.LambdaType))

#2. Write a Python program to check if a given value is a method of a user-defined class. Use types.MethodType()

import types
class C:
    def x():
        return 1
    def y():
        return 1    
        
def b():
    return 2

print(isinstance(C().x, types.MethodType))

#3. Write a Python program to check if a given function is a generator or not. Use types.GeneratorType()

import types

def gen_1():
  return 1



print(isinstance(gen_1, types.GeneratorType))

#4. Write a Python program to check if a given value is compiled code or not. Also check if a given value is a module or not. 
#Use types.CodeType, types.ModuleType()


import types

def mod():
  return 1

print(isinstance(mod, types.ModuleType))
print(isinstance(mod, types.CodeType))

"""**3 Module CSV**"""

#1. Write a Python program to read and display the content of a given CSV file. Use csv.reader
import csv
import pandas as pd

file = pd.read_csv("/content/sample_data/california_housing_test.csv")
print(file)

#2. Write a Python program to count the number of lines in a given CSV file. Use csv.reader

import pandas as pd

data = pd.read_csv('/content/sample_data/california_housing_test.csv')

print(data.count())
print('Data rows and columns = ', data.shape)

#3. Write a Python program to parse a given CSV string and get the list of lists of string values. Use csv.reader

import csv

f = open("/content/sample_data/california_housing_test.csv")
print(next(f))

#4. Write a Python program to read the current line from a given CSV file. Use csv.reader

import csv

f = open("/content/sample_data/california_housing_test.csv")
print(next(f))

#5. Write a Python program to skip the headers of a given CSV file. Use csv.reader

import csv
import pandas as pd

file = pd.read_csv("/content/sample_data/california_housing_test.csv")
print(file.to_string())

# 6. Write a Python program to write (without writing separate lines between rows) and read a CSV file with specified delimiter. Use csv.reader

import csv     
fw = open("test.csv", "w", newline='')
writer = csv.writer(fw, delimiter = ",")
writer.writerow(["a","b","c"])
writer.writerow(["d","e","f"])
writer.writerow(["g","h","i"])
fw.close()
 
fr = open("test.csv", "r")
csv = csv.reader(fr, delimiter = ",")
for row in csv:
  print(row) 
fr.close()

#7. Write a Python program to write dictionaries and a list of dictionaries to a given CSV file. Use csv.reader

import csv
print("Write dictionaries to a CSV file:")
fw = open("test.csv", "w", newline='')
writer = csv.DictWriter(fw, fieldnames=["Name", "Class"])
writer.writeheader()
writer.writerow({"Name": "Jasmine Barrett", "Class": "V"})
writer.writerow({"Name": "Garry Watson", "Class": "V"})
writer.writerow({"Name": "Courtney Caldwell", "Class": "VI"})
fw.close()
fr = open("test.csv", "r")
csv = csv.reader(fr, delimiter = ",")
for row in csv:
  print(row) 
fr.close()

